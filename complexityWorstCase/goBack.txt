private void goBack(Maze maze, Stack<Position> path) {                      Cost            Occurrence (worst case)
        // If the stack is empty, stop
        if (path.isEmpty())                                                  C1                   1
            return;                                                          C2                   1              

        // Get the direction to go back
        Position lastPos = path.pop();                                       C3                   1
        Direction dir = lastPos.getLastDirection();                          C4                   1

        // If direction is null, stop
        if (dir == null)                                                     C5                   1     
            return;                                                          C6                   1

        // If the position is a wall, stop
        if (isWall(lastPos))                                                 C7                   1
            return;                                                          C8                   1

        // If the way back is a wall, stop
        Direction oppositeDir = DirectionHelper.getOpposite(dir);            C9                   1
        if (isNextPosWall(lastPos, oppositeDir))                             C10                  1
            return;                                                          C11                  1

        // Go back to the last position
        maze.go(oppositeDir.toString());                                     C12                  1         
        System.out.println(oppositeDir);                                     C13                  1
    }

Total cost: C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + C9 + C10 + C11 + C12 + C13
Time complexity: O(1)